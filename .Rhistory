install.packages("igraph")
install.packages("dplyr")
library(igraph)
library(dplyr)
install.packages("hash")
library(hash)
library(RColorBrewer)
setwd("~/Programação/Teste ONA")
dados = read.csv("dados.csv", sep = ",")
dados = as.data.frame(dados)
dados = filter(dados, dados[,3] > 3)
vetor = c()
i = 1
while (i < 292) {
vetor = append(vetor, dados[i, 1])
vetor = append(vetor, dados[i, 2])
i = i + 1
}
conta_times = c()
conta_pesos = c()
conta_times = c()
conta_pesos = c()
i = 1
while (i < 292) {
conta_times = append(conta_times, dados[i, 4])
conta_pesos = append(conta_pesos, dados[i, 5])
i = i + 1
}
pesos = read.csv("pesos.csv", sep = ",")
grafo = graph(edges = vetor, directed = F)
V(grafo)$times = pesos[, 3]
V(grafo)$peso = pesos[, 2]
cores = as.factor(pesos[,3])
V(grafo)$cores = cores
tkplot(grafo, vertex.size = vertex_attr(grafo)$peso)
tkplot(grafo, vertex.size = vertex_attr(grafo)$peso)
tkplot(grafo, vertex.size = vertex_attr(grafo)$peso)
setwd("~/Estudos/Formação Cientista de Dados com Python e R (Udemy)/Seção 36 - Prática em R - Grafos/dados")
library(igraph)
# Carregamos um grafo de relacionamentos, 53 vértices e 179 arestas
grafo = read_graph("Grafo.graphml", format = c("graphml"))
# 53 vértices e 179 arestas
grafo
plot(grafo)
# Vizinhança, zero inclui o próprio vértice, mode all não considera a direção
neighborhood(grafo, 0, mode = c("all"))
# 53 vértices e 179 arestas
grafo
# Vizinhança, zero inclui o próprio vértice, mode all não considera a direção
neighborhood(grafo, 1, mode = c("all"))
setwd("~/Programação/Teste ONA")
neighborhood(grafo, 1, mode = c("all"))
tkplot(grafo, vertex.size = vertex_attr(grafo)$peso)
library(igraph)
library(dplyr)
library(hash)
library(RColorBrewer)
dados = read.csv("dados.csv", sep = ",")
dados = as.data.frame(dados)
dados = filter(dados, dados[,3] > 3)
vetor = c()
i = 1
while (i < 292) {
vetor = append(vetor, dados[i, 1])
vetor = append(vetor, dados[i, 2])
i = i + 1
}
conta_times = c()
conta_pesos = c()
i = 1
while (i < 292) {
conta_times = append(conta_times, dados[i, 4])
conta_pesos = append(conta_pesos, dados[i, 5])
i = i + 1
}
pesos = read.csv("pesos.csv", sep = ",")
grafo = graph(edges = vetor, directed = F)
V(grafo)$times = pesos[, 3]
V(grafo)$peso = pesos[, 2]
cores = as.factor(pesos[,3])
V(grafo)$cores = cores
tkplot(grafo, vertex.size = vertex_attr(grafo)$peso)
neighborhood(grafo, 1, mode = c("all"))
